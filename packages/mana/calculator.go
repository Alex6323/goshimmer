package mana

import (
	"math"
)

// A calculator that can be used to calculate the changes of mana due to erosion or mana generation.
type Calculator struct {
	decayInterval          float64
	decayRate              float64
	options                *CalculatorOptions
	tokenSupplyScalefactor float64
}

// Creates a new calculator that can be used to calculate the changes of mana due to erosion or mana generation.
func NewCalculator(decayInterval float64, decayRate float64, optionalOptions ...CalculatorOption) *Calculator {
	return &Calculator{
		// store key settings
		decayInterval: decayInterval,
		decayRate:     decayRate,

		// configure optional parameters
		options: DEFAULT_OPTIONS.Override(optionalOptions...),

		// derive important factors ...
		// ... make mana reach exactly the token supply as it's max value (n coins => n mana)
		tokenSupplyScalefactor: decayRate / (1 - decayRate),
	}
}

// Returns the amount of mana that was generated by holding the given amount of coins for the given time.
func (calculator *Calculator) GenerateMana(coins uint64, heldTime uint64) (result uint64, roundingError float64) {
	// calculate results
	relativeDecayTime := float64(heldTime) / float64(calculator.decayInterval)
	erosionFactor := (1 - math.Pow(1-calculator.decayRate, float64(relativeDecayTime+1)) - calculator.decayRate) / calculator.decayRate
	gainedMana := float64(coins) * calculator.options.ManaScaleFactor * calculator.tokenSupplyScalefactor * erosionFactor

	// assign rounded results & determine roundingErrors
	result = uint64(math.Round(gainedMana))
	roundingError = gainedMana - float64(result)

	return
}

// Returns the amount of mana that is left after the erosion of the given amount for the given time.
func (calculator *Calculator) ErodeMana(mana uint64, decayTime uint64) (result uint64, roundingError float64) {
	// if no time has passed -> return unchanged values
	if decayTime == 0 {
		result = mana

		return
	}

	// calculate results
	growthFactor := math.Log(1-calculator.decayRate) / float64(calculator.decayInterval)
	erodedMana := float64(mana) * math.Pow(math.E, growthFactor*float64(decayTime))

	// assign rounded results & determine roundingErrors
	result = uint64(math.Round(erodedMana))
	roundingError = erodedMana - float64(result)

	return
}
