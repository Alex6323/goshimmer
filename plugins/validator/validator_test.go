package validator

import (
	"fmt"

	"github.com/iotaledger/iota.go/address"
	. "github.com/iotaledger/iota.go/consts"
	"github.com/iotaledger/iota.go/signing"
	. "github.com/iotaledger/iota.go/trinary"
)

const (
	exampleHash  = "999999999999999999999999999999999999999999999999999999999999999999999999999999999"
	exampleSeed  = exampleHash
	exmapleIndex = 0
	exampleSec   = SecurityLevelLow
)

// Creates bundle signature fragments for the given address index and bundle hash.
// Each signature fragment after the first must go into its own meta transaction with value = 0.
func signature(seed Trytes, index uint64, sec SecurityLevel, bundleHash Hash) []Trytes {
	// compute seed based on address index
	subseed, _ := signing.Subseed(seed, index)
	// generate the private key
	prvKey, _ := signing.Key(subseed, sec)

	normalizedBundleHash := signing.NormalizedBundleHash(bundleHash)

	signatureFragments := make([]Trytes, sec)
	for i := 0; i < int(sec); i++ {
		// each security level signs one third of the (normalized) bundle hash
		signedFragTrits, _ := signing.SignatureFragment(
			normalizedBundleHash[i*HashTrytesSize/3:(i+1)*HashTrytesSize/3],
			prvKey[i*KeyFragmentLength:(i+1)*KeyFragmentLength],
		)
		signatureFragments[i] = MustTritsToTrytes(signedFragTrits)
	}

	return signatureFragments
}

func ExamplePLUGIN() {
	// corresponding address to validate against.
	addr, _ := address.GenerateAddress(exampleSeed, exmapleIndex, exampleSec)
	fmt.Println(addr)

	// compute the signature fragments which would be added to the (meta) transactions
	signatureFragments := signature(exampleSeed, exmapleIndex, exampleSec, exampleHash)
	fmt.Println(signatureFragments[0])

	// Output:
	// BSIXFJENGVJSOWPVHVALMPOPO9PUKHXDQI9VDELCBJXN9TCNQPTFEDMPQCVBOJSZUHEOABYYYAT9IAHHY
	
}
