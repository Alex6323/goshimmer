package ledgerstate

import (
	"crypto/rand"
	"fmt"

	"github.com/iotaledger/hive.go/marshalutil"
	"github.com/mr-tron/base58"
)

// region TransactionID ////////////////////////////////////////////////////////////////////////////////////////////////

// TransactionIDLength contains the amount of bytes that a marshaled version of the ID contains.
const TransactionIDLength = 32

// TransactionID is the type that represents the identifier of a Transaction.
type TransactionID [TransactionIDLength]byte

// GenesisTransactionID represents the genesis ID.
var GenesisTransactionID TransactionID

// TransactionIDFromBase58 creates a TransactionID from a base58 encoded string.
func TransactionIDFromBase58(base58String string) (id TransactionID, err error) {
	// decode string
	bytes, err := base58.Decode(base58String)
	if err != nil {
		err = fmt.Errorf("failed to decode base58 encoded string '%s': %w", base58String, err)

		return
	}

	// sanitize input
	if len(bytes) != TransactionIDLength {
		err = fmt.Errorf("base58 decoded TransactionID '%s' does not match expected length of %d bytes", base58String, TransactionIDLength)

		return
	}

	// copy bytes to result
	copy(id[:], bytes)

	return
}

// TransactionIDFromBytes unmarshals a TransactionID from a sequence of bytes.
func TransactionIDFromBytes(bytes []byte) (result TransactionID, consumedBytes int, err error) {
	// parse the bytes
	marshalUtil := marshalutil.New(bytes)
	idBytes, idErr := marshalUtil.ReadBytes(TransactionIDLength)
	if idErr != nil {
		err = idErr

		return
	}
	copy(result[:], idBytes)
	consumedBytes = marshalUtil.ReadOffset()

	return
}

// ParseTransactionID is a wrapper for simplified unmarshaling of TransactionIDs from a byte stream using the
// marshalUtil package.
func ParseTransactionID(marshalUtil *marshalutil.MarshalUtil) (TransactionID, error) {
	id, err := marshalUtil.Parse(func(data []byte) (interface{}, int, error) { return TransactionIDFromBytes(data) })
	if err != nil {
		return TransactionID{}, err
	}

	return id.(TransactionID), nil
}

// RandomTransactionID creates a random TransactionID which can for example be used in unit tests.
func RandomTransactionID() (id TransactionID) {
	// generate a random sequence of bytes
	idBytes := make([]byte, TransactionIDLength)
	if _, err := rand.Read(idBytes); err != nil {
		panic(err)
	}

	// copy the generated bytes into the result
	copy(id[:], idBytes)

	return
}

// Bytes marshals the ID into a sequence of bytes.
func (i TransactionID) Bytes() []byte {
	return i[:]
}

// String creates a human readable base58 encoded version of the TransactionID.
func (i TransactionID) String() string {
	return base58.Encode(i[:])
}

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////

// region Transaction //////////////////////////////////////////////////////////////////////////////////////////////////

type Transaction struct {
}

func (t *Transaction) UnsignedBytes() []byte {
	return nil
}

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////

// region UnlockBlockType //////////////////////////////////////////////////////////////////////////////////////////////

// UnlockBlockType defines the type of the UnlockBlock. Different types of UnlockBlocks can unlock different types of
// Outputs.
type UnlockBlockType uint8

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////

// region UnlockBlock //////////////////////////////////////////////////////////////////////////////////////////////////

type UnlockBlock interface {
	// Bytes returns a marshaled version of this UnlockBlock.
	Bytes() []byte
}

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////

// region SignatureUnlockBlock /////////////////////////////////////////////////////////////////////////////////////////

type SignatureUnlockBlock struct {
}

func (s *SignatureUnlockBlock) SignatureValid(address Address, unsignedBytes []byte) (bool, error) {
	return true, nil
}

// Bytes returns a marshaled version of this UnlockBlock.
func (s *SignatureUnlockBlock) Bytes() []byte {
	return nil
}

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////
